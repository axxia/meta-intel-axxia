From 6826708b69ced698ed1de4fb779fce1f056a509a Mon Sep 17 00:00:00 2001
From: John Jacques <john.jacques@intel.com>
Date: Thu, 23 Sep 2021 12:19:06 -0500
Subject: [PATCH 04/12] watchdog: iTCO_wdt: use dev_*() instead of pr_*() for
 logging

For device log outputs, it's better to have device name / ID
prefixed in all messages, so use the proper dev_*() functions here.

Explicit message on module load/unload don't seem to be really helpful
(we have other means to check which modules have been loaded), instead
just add noise to the kernel log. So, removing them.

Signed-off-by: Enrico Weigelt, metux IT consult <info@metux.net>
Reviewed-by: Guenter Roeck <linux@roeck-us.net>
Link: https://lore.kernel.org/r/20201117152214.32244-2-info@metux.net
Signed-off-by: Guenter Roeck <linux@roeck-us.net>
Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
Signed-off-by: John Jacques <john.jacques@intel.com>
---
 drivers/watchdog/iTCO_wdt.c | 18 ++++++++----------
 1 file changed, 8 insertions(+), 10 deletions(-)

diff --git a/drivers/watchdog/iTCO_wdt.c b/drivers/watchdog/iTCO_wdt.c
index 7b96d9cf4588..3b75452918b9 100644
--- a/drivers/watchdog/iTCO_wdt.c
+++ b/drivers/watchdog/iTCO_wdt.c
@@ -40,8 +40,6 @@
  *	Includes, defines, variables, module parameters, ...
  */
 
-#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
-
 /* Module and version information */
 #define DRV_NAME	"iTCO_wdt"
 #define DRV_VERSION	"1.11"
@@ -285,7 +283,7 @@ static int iTCO_wdt_start(struct watchdog_device *wd_dev)
 	if (assume_noreboot_access == 0) {
 		if (p->update_no_reboot_bit(p->no_reboot_priv, false)) {
 			spin_unlock(&p->io_lock);
-			pr_err("failed to reset NO_REBOOT flag, reboot disabled by hardware/BIOS\n");
+			dev_err(wd_dev->parent,	"failed to reset NO_REBOOT flag, reboot disabled by hardware/BIOS\n");
 			return -EIO;
 		}
 	}
@@ -520,7 +518,7 @@ static int iTCO_wdt_probe(struct platform_device *pdev)
 		/* Check chipset's NO_REBOOT bit */
 		if (p->update_no_reboot_bit(p->no_reboot_priv, false) &&
 		    iTCO_vendor_check_noreboot_on()) {
-			pr_info("unable to reset NO_REBOOT flag, device disabled by hardware/BIOS\n");
+			dev_info(dev, "unable to reset NO_REBOOT flag, device disabled by hardware/BIOS\n");
 			return -ENODEV;	/* Cannot reset NO_REBOOT bit */
 		}
 
@@ -541,12 +539,12 @@ static int iTCO_wdt_probe(struct platform_device *pdev)
 	if (!devm_request_region(dev, p->tco_res->start,
 				 resource_size(p->tco_res),
 				 pdev->name)) {
-		pr_err("I/O address 0x%04llx already in use, device disabled\n",
+		dev_err(dev, "I/O address 0x%04llx already in use, device disabled\n",
 		       (u64)TCOBASE(p));
 		return -EBUSY;
 	}
 
-	pr_info("Found a %s TCO device (Version=%d, TCOBASE=0x%04llx)\n",
+	dev_info(dev, "Found a %s TCO device (Version=%d, TCOBASE=0x%04llx)\n",
 		pdata->name, pdata->version, (u64)TCOBASE(p));
 
 	/* Clear out the (probably old) status */
@@ -569,7 +567,7 @@ static int iTCO_wdt_probe(struct platform_device *pdev)
 		break;
 	}
 
-	p->wddev.info =	&ident,
+	p->wddev.info = &ident,
 	p->wddev.ops = &iTCO_wdt_ops,
 	p->wddev.bootstatus = 0;
 	p->wddev.timeout = WATCHDOG_TIMEOUT;
@@ -586,7 +584,7 @@ static int iTCO_wdt_probe(struct platform_device *pdev)
 	   if not reset to the default */
 	if (iTCO_wdt_set_timeout(&p->wddev, heartbeat)) {
 		iTCO_wdt_set_timeout(&p->wddev, WATCHDOG_TIMEOUT);
-		pr_info("timeout value out of range, using %d\n",
+		dev_info(dev, "timeout value out of range, using %d\n",
 			WATCHDOG_TIMEOUT);
 	}
 
@@ -594,11 +592,11 @@ static int iTCO_wdt_probe(struct platform_device *pdev)
 	watchdog_stop_on_unregister(&p->wddev);
 	ret = devm_watchdog_register_device(dev, &p->wddev);
 	if (ret != 0) {
-		pr_err("cannot register watchdog device (err=%d)\n", ret);
+		dev_err(dev, "cannot register watchdog device (err=%d)\n", ret);
 		return ret;
 	}
 
-	pr_info("initialized. heartbeat=%d sec (nowayout=%d)\n",
+	dev_info(dev, "initialized. heartbeat=%d sec (nowayout=%d)\n",
 		heartbeat, nowayout);
 
 	return 0;
-- 
2.25.1

