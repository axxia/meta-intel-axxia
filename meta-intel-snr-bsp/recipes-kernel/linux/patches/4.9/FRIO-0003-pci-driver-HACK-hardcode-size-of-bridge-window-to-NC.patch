From 1f9f0c780574f00dd2cf5a471e99634556bd307d Mon Sep 17 00:00:00 2001
From: Ben Shelton <benjamin.h.shelton@intel.com>
Date: Thu, 10 Sep 2015 09:25:24 -0500
Subject: [PATCH 3/6] pci-driver: HACK: hardcode size of bridge window to NCP
 device

The Linux PCI address space mapping code does not allocate a sufficient size
bridge window to accommodate all four BARs of the X9/XLF PCI device, even when
the BIOS' PCI memory hole is wide enough for everything to fit.

To get around this, hardcode the size of the bridge window containing the NCP
device to 0x10000000, which ensures that there will be enough space for all the
BARs, including the SR-IOV BARs.  Additionally, change the calculation in
calculate_memsize() so upstream buses can resize properly.

This commit should be reverted as soon as a better solution is available.

Signed-off-by: Ben Shelton <benjamin.h.shelton@intel.com>
---
 drivers/pci/setup-bus.c | 19 +++++++++++++++++--
 1 file changed, 17 insertions(+), 2 deletions(-)

diff --git a/drivers/pci/setup-bus.c b/drivers/pci/setup-bus.c
index f30ca75..ae2e6e4 100644
--- a/drivers/pci/setup-bus.c
+++ b/drivers/pci/setup-bus.c
@@ -853,8 +853,6 @@ static resource_size_t calculate_memsize(resource_size_t size,
 		size = min_size;
 	if (old_size == 1)
 		old_size = 0;
-	if (size < old_size)
-		size = old_size;
 	size = ALIGN(size + size1, align);
 	return size;
 }
@@ -1028,6 +1026,8 @@ static int pbus_size_mem(struct pci_bus *bus, unsigned long mask,
 	resource_size_t children_add_align = 0;
 	resource_size_t add_align = 0;
 
+        int bus_has_axxia_device = 0;
+
 	if (!b_res)
 		return -ENOSPC;
 
@@ -1048,6 +1048,15 @@ static int pbus_size_mem(struct pci_bus *bus, unsigned long mask,
 			     (r->flags & mask) != type3))
 				continue;
 			r_size = resource_size(r);
+
+			if ((type == IORESOURCE_MEM) &&
+                            (dev->vendor == 0x8086) &&
+                            ((dev->device == 0x5128) || (dev->device == 0x5130)) &&
+                            (!bus_has_axxia_device)) {
+                            dev_info(&bus->self->dev, "Bus contains Intel Axxia device!\n");
+                            bus_has_axxia_device = 1;
+                        }
+
 #ifdef CONFIG_PCI_IOV
 			/* put SRIOV requested res to the optional list */
 			if (realloc_head && i >= PCI_IOV_RESOURCES &&
@@ -1110,6 +1119,12 @@ static int pbus_size_mem(struct pci_bus *bus, unsigned long mask,
 	b_res->start = min_align;
 	b_res->end = size0 + min_align - 1;
 	b_res->flags |= IORESOURCE_STARTALIGN;
+
+	if (bus_has_axxia_device) {
+            dev_info(&bus->self->dev, "adjusting size to 0x10000000\n");
+            size1 = 0x10000000;
+        }
+
 	if (size1 > size0 && realloc_head) {
 		add_to_list(realloc_head, bus->self, b_res, size1-size0, add_align);
 		dev_printk(KERN_DEBUG, &bus->self->dev, "bridge window %pR to %pR add_size %llx add_align %llx\n",
-- 
2.5.2

