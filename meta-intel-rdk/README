meta-intel-rdk
==============

This is the OpenEmbedded/Yocto layer for Intel Axxia RDK components:

  - RDK kernel modules including ADK NetD (Network Driver).
  - [optional] RDK userspace tools.

Use of this layer assumes that the RDK relase is available locally.


Dependencies
============

This layer depends on meta-intel-snr BSP layer and its dependencies.


Table of Contents
=================

 I. Prerequisites
II. Building meta-intel-rdk
    1. Build RDK with Intel Axxia reference platform
    2. Build RDK with other OpenEmbedded/Yocto layers
    3. Common RDK related settings

I. Prerequisites
================

   If you have downloaded RDK archives locally, then do the following:

   $ cd <path-to-layer>/meta-intel-rdk
   $ mkdir downloads
   $ cd downloads
   $ cp <path-to-archive>/rdk_klm_src_<releaseinfo>.txz .
   $ ln -s rdk_klm_src_<releaseinfo>.txz rdk_klm_src.tar.xz

   If RDK userspace feature is included, then add the following.

   $ cp <path-to-archive>/rdk_user_src_<releaseinfo>.txz .
   $ ln -s rdk_user_src_<releaseinfo>.txz rdk_user_src.tar.xz


II. Building meta-intel-rdk
===========================

This layer provides metadata for building in-distribution images for
Intel Axxia SnowRidge BSP containing intree RDK modules and optional 
rdk userspace tools.


1. Build RDK with Intel Axxia reference platform
------------------------------------------------

To enable RDK layer in Intel Axxia reference platform build, after
following the instructions from README.vcn file, the following
additional steps are required:

   Edit the conf/bblayers.conf file

   $ pwd (you should be at $YOCTO/axxia-build)
   $ vi conf/bblayers.conf

   Edit BBLAYERS variable as follows. Replace references to $YOCTO
   below with the actual value you provided prior.

   BBLAYERS += " $YOCTO/meta-intel-axxia/meta-intel-rdk"
   
   
2. Build RDK with other OpenEmbedded/Yocto layers
---------------------------------------------------

In order to build RDK layer with other yocto-compatible layers, such as
Wind River Linux ones, after following the instructions from README.snr
file, the following additional steps are required:

    bitbake-layers add-layer <path-to-layer>/meta-intel-rdk

In local.conf, add to the white list the following packages if necesary:

    PNWHITELIST_intel-rdk += 'rdk-tools bjam-native boost thrift'


3. Common RDK related settings
------------------------------

The following optional setting related to RDK components can be added
in conf/local.conf:

   $ vi conf/local.conf

3.1. Enable RDK userspace support (optional)

     DISTRO_FEATURES_append = " rdk-userspace"

3.2. If RDK userspace feature is included, set the release info for 
     rdk-tools package as follows.

     RDK_TOOLS_VERSION = "<releaseinfo>"
     
3.3. If RDK userspace feature is included, choose the IES API mode of
     operation through IES_ENABLE_SHM variable: 
     - "true" value for SHM (shared-memory model) - default 
     - "false" value for RPC (remote procedure call)

     IES_ENABLE_SHM = "false"

3.4. To get RDK archives from a diferent location than the layer
     download directory, set the following variables:
     
     RDK_KLM_ARCHIVE = "file://<path-to-archive>/rdk_klm_src_<releaseinfo>.txz"
     RDK_TOOLS_ARCHIVE = "file://<path-to-archive>/rdk_user_src_<releaseinfo>.txz"

3.5. To get RDK archives from a remote location (http, https server), 
     set the following variables:

     RDK_KLM_ARCHIVE = "http[s]://<server_path>/rdk_klm_src_<version>.<extension>"
     RDK_TOOLS_ARCHIVE = "http[s]://<server_path>/rdk_user_src_<version>.<extension>"

     Note: Because no md5/sha256 checksum is set in the recipe, we'll
     get some warning: do_fetch: Missing md5/sha256 SRC_URI checksum.
     Build will continue anyway, but to get ride of those warnings, you
     can set md5 and sha256 checksums as follow:
     * for RDK_KLM_ARCHIVE in recipes-kernel/linux/linux-rdk.inc
           and recipes-kernel/linux-firmware/linux-firmware_%.bbappend
     * for RDK_TOOLS_ARCHIVE in recipes-extended/rdk-tools/rdk-tools.bb

3.6. Set the version of the RDK KLM modules throught RDK_KLM_VERSION
     variable in order to customize the path where the drivers will be
     installed in the kernel tree (drivers/staging/intel/<rdk-klm-version>)
     and to customize the commit message in the kernel git repository
     from work-shared directory.

     RDK_KLM_VERSION = "<rdk-klm-version>"

     If not set, the value of this variable will be extracted from the
     RDK KLM archive name (rdk_klm_src_<releaseinfo>.txz).
     
3.7. Autoload RDK modules (disabled from blacklist.conf)

     KERNEL_MODULE_AUTOLOAD_append_axxiax86-64 = " hqm"
     KERNEL_MODULE_AUTOLOAD_append_axxiax86-64 = " igb"
     KERNEL_MODULE_AUTOLOAD_append_axxiax86-64 = " qat_c4xxx"
     KERNEL_MODULE_AUTOLOAD_append_axxiax86-64 = " intel_qat"
     KERNEL_MODULE_AUTOLOAD_append_axxiax86-64 = " ice_sw"

3.8. Header files exported by KLM to user space can be accessed as
     follows.  When cross-compiling, add the following to the compile
     flags.

     -I$(SDKTARGETSYSROOT)/usr/kernel-headers/include

     When using the axxia-image-dev root file system on SNR add the
     following.

     -I/usr/kernel-headers/include

3.9. Experimental: If RDK userspace feature is included, choose to
     enable LTTng support for RDK user-space:

     - "true" - enables LTTng for RDK Userspace.
     - "false" - disables LTTng for RDK Userspace.

     RDK_LTTNG_ENABLE = "false"
