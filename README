meta-intel-axxia
================

This is the official OpenEmbedded/Yocto BSP layer for Intelâ€™s family of
Axxia x86-64 Mobile & Enterprise Communication Processors.

Note that this is a "Power On" branch for Victoria Canyon (Intel
reference board) and will not work in ASE.


Supported MACHINES
==================

Boards Supported by this layer (Please refer to the associate .conf
for more information):

	* axxiax86-64 - Axxia x86 Mobile & Enterprise Communication 
                        Processors family (64-bit)

Reference Boards
================

Snowridge - based on x86_64 architecture - hardware is not available
yet, just the simulator.


Sources
=======

In most cases, the public repositories can be used (poky,
meta-openembedded, etc.). In the meta-intel-axxia case, however, there
are options. Here's what is available and what each provides.

The Intel github.com repositories have the latest. To access the
private repository, request permission from Intel. Note that the
private repository is used for development and is not supported.

   $ git clone https://github.com/axxia/meta-intel-axxia_private.git \
               meta-intel-axxia

The public Intel repository contains changes that have been submitted
to Yocto, but may not have been accepted yet.

   $ git clone https://github.com/axxia/meta-intel-axxia.git


Dependencies
============

This layer depends on:

Poky
----
URI: git://git.yoctoproject.org/poky.git
branch: rocko
revision: 8883ee32f2a77bf532832d4fad5c20912a1a3630

OpenEmbedded
------------
URI: https://github.com/openembedded/meta-openembedded.git
branch: rocko
revision: eae996301d9c097bcbeb8046f08041dc82bb62f8

Yocto Virtualization Layer
--------------------------
URI: git://git.yoctoproject.org/meta-virtualization
branch: rocko
revision: b704c689b67639214b9568a3d62e82df27e9434f

Intel Meta Layer
----------------
URI: git://git.yoctoproject.org/meta-intel
branch: rocko
revision: 4ee8ff5ebe0657bd376d7a79703a21ec070ee779

Security
--------
URI: https://git.yoctoproject.org/git/meta-security
branch: rocko
revision: 74860b2b61afd033fba130044ae66567ead57aaf


Back Ported Linux Changes
========================

Some changes have been up-streamed, but have not yet been back ported
to Yocto Linux 4.12 (git://git.yoctoproject.org/linux-yocto-4.12) or
the Intel Linux 4.14 kernel in meta-intel
(git://github.com/intel/linux-intel-lts.git).  Some of these have been
added to this meta layer.  The changes are described below.  In each
case, any changes required are described and the publically available
patch is referenced.  Only changes functionally required for internal
testing have been back ported.

The "title" of the commit (Subject: or first line) is used to identify
the commit, as this is the easiest way to find it in the repositories.

In the following descriptions, "with no changes" means that a patch
was obtained using 'git format-patch -1 <sha>' from the referenced
respoistory and was applied using 'git am -3 <patch>'.

In the meta layer, the patches for Yocto Linux 4.12 can be found in
meta-intel-snr/recipes-kernel/linux/patches/4.12.  For Intel Linux
4.14, the patches are in
meta-intel-snr/recipes-kernel/linux/patches/4.14.

i2c: i801: Add support for Intel Cedar Fork
-------------------------------------------

cb09d943c70d in kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0001-i2c-i801-Add-support-for-Intel-Cedar-Fork.patch.

This has already been back ported ot Intel Linux 4.14 as part of
67936a41e597331c991528c5e5bd791cfbb1b1d6 which references a merge
branch.

mtd: spi-nor: intel-spi: Add support for Intel Cedar Fork SPI serial flash
--------------------------------------------------------------------------

824af37ef2d0 in kernel.org

This has already been back ported to Yocto Linux 4.12 as
b373e336eb847be8d8280be42e779a70c8b9cde4 which references the commit
in kernel.org.

Back ported to Intel Linux 4.14, with no changes, as
SNR-0001-mtd-spi-nor-intel-spi-Add-support-for-Intel-Cedar-Fo.patch.

pinctrl: intel: Add Intel Cedar Fork PCH pin controller support
---------------------------------------------------------------

0f80dbc133e3 in kernel.org

Back ported to Yocto Linux 4.12, with small changes, as
SNR-0002-pinctrl-intel-Add-Intel-Cedar-Fork-PCH-pin-controlle.patch.

Back ported to Intel Linux 4.14, with no changes, as
SNR-0002-pinctrl-intel-Add-Intel-Cedar-Fork-PCH-pin-controlle.patch.

mmc: sdhci-pci: Add support for Intel CDF
-----------------------------------------

cdaba732ff2f in kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0003-mmc-sdhci-pci-Add-support-for-Intel-CDF.patch.

Back ported to Intel Linux 4.14, with no changes, as
SNR-0003-mmc-sdhci-pci-Add-support-for-Intel-CDF.patch.

pinctrl: intel: Make offset to interrupt status register configurable
---------------------------------------------------------------------

cf769bd86bcc in kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0004-pinctrl-intel-Make-offset-to-interrupt-status-regist.patch

This has already been back ported to Intel Linux 4.14 as
8dba5c8b00e1ade3b18d19bc83b86e34580add00.

intel_th: pci: Add Cedar Fork PCH support
-----------------------------------------

920ce7c33d in kernel.org

Not back ported at present.

x86/cpufeatures: Enumerate cldemote instruction
-----------------------------------------------

912413057395 in kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0005-x86-cpufeatures-Enumerate-cldemote-instruction.patch

Back ported to Intel Linux 4.14, with no changes, as
SNR-0004-x86-cpufeatures-Enumerate-cldemote-instruction.patch

x86/intel_rdt: Add command line parameter to control L2_CDP
-----------------------------------------------------------

31516de306c0 in kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0006-x86-intel_rdt-Add-command-line-parameter-to-control-.patch

Back ported to Intel Linux 4.14, with no changes, as
SNR-0005-x86-intel_rdt-Add-command-line-parameter-to-control-.patch

serial: 8250_mid: Enable HSU on Intel Cedar Fork PCH
----------------------------------------------------

daf3930cf616 in kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0007-serial-8250_mid-Enable-HSU-on-Intel-Cedar-Fork-PCH.patch

Back ported to Intel Linux 4.14, with no changes, as
SNR-0006-serial-8250_mid-Enable-HSU-on-Intel-Cedar-Fork-PCH.patch

drivers: tty: 8250: use setup_timer() helper.
---------------------------------------------

3056151 from kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0008-drivers-tty-8250-use-setup_timer-helper.patch

Back ported to Intel Linux 4.14, with no changes, as
SNR-0007-drivers-tty-8250-use-setup_timer-helper.patch

serial: 8250: Convert timers to use timer_setup()
-------------------------------------------------

7c33564 from kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0009-serial-8250-Convert-timers-to-use-timer_setup.patch

Back ported to Intel Linux 4.14, with no changes, as
SNR-0008-serial-8250-Convert-timers-to-use-timer_setup.patch

serial: 8250: fix potential deadlock in rs485-mode
--------------------------------------------------

b86f86e from kernel.org

This has already been back ported to Yocto Linux 4.12 as
b86f86e8e7c5264bb8f5835d60f9ec840d9f5a7a.

Back ported to Intel Linux 4.14, with no changes, as
SNR-0009-serial-8250-fix-potential-deadlock-in-rs485-mode.patch

pinctrl: cedarfork: Correct EAST pin ordering
---------------------------------------------

a319b56 from kernel.org

Back ported to Yocto Linux 4.12, with no changes, as
SNR-0010-pinctrl-cedarfork-Correct-EAST-pin-ordering.patch

Back ported to Intel Linux 4.14, with no changes, as
SNR-0010-pinctrl-cedarfork-Correct-EAST-pin-ordering.patch

Building the meta-intel-axxia BSP layer
=======================================

To begin using the Yocto Project build tools, you must first setup your work
environment and verify that you have the required host packages installed
on the system you will be using for builds. 

Check the YOCTO Reference Manual for the system you are using and verify you
have the minimum required packages installed:
http://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html

1. Create an empty build directory and verify that the partition has
   at least 50Gb of free space. Next set an environment variable, YOCTO,
   to the full path.

   $ cd $HOME
   $ df -h .  # verify output shows adequate space available
   $ mkdir yocto
   $ cd yocto
   $ export YOCTO=$HOME/yocto # should also add this to your ~/.bashrc file.

2. Clone the Axxia meta layer. This provides meta data for building
   images for the Axxia specific board types.  See 'Sources' above to
   select the right meta-intel-axxia repository, branch, and version.
   Use the 'rocko' branch or the tag specified in the release notes.

   $ cd $YOCTO
   $ (the git clone command chosen above)
   $ cd meta-intel-axxia

   If using the 'rocko' branch.

   $ git checkout rocko

   If using the tag specified in the releases notes.

   $ git checkout tags/(the tag specified in the releases notes)

3. Clone the Yocto Project build tools (Poky) environment.

   $ cd $YOCTO
   $ git clone git://git.yoctoproject.org/poky.git
   $ cd poky
   $ git checkout <the revision specified in Dependencies above>

4. The Open Embedded project provides many useful layers and packages
   such as networking. Download the Open Embedded Yocto Project hosted
   repository with the following.

   $ cd $YOCTO
   $ git clone https://github.com/openembedded/meta-openembedded.git
   $ cd meta-openembedded
   $ git checkout <the revision specified in Dependencies above>

5. Clone Yocto Virtualization Layer which provides packages for
   virtualization such as Linux Container Support (lxc).

   $ cd $YOCTO
   $ git clone git://git.yoctoproject.org/meta-virtualization
   $ cd meta-virtualization
   $ git checkout <the revision specified in Dependencies above>

6. Clone the Intel meta layer. This provides Intel hardware support 
   metadata which are inherited in axxiax86-64 BSP.

   $ cd $YOCTO
   $ git clone git://git.yoctoproject.org/meta-intel
   $ cd meta-intel
   $ git checkout <the revision specified in Dependencies above>

7. Clone the Yocto security meta layer. This provides recipes for some
   utilities used in the axxia-image-vcn image.

   $ cd $YOCTO
   $ git clone git://git.yoctoproject.org/meta-security
   $ cd meta-security
   $ git checkout <the revision specified in Dependencies above>

8. Create the build directory. The name is optional and will default
   to 'build', however it helps to choose a name to match the board
   type. For example, we will use axxia.

   $ cd $YOCTO
   $ source meta-intel-axxia/axxia-env
   $ source poky/oe-init-build-env axxia-build

9. Check the conf/bblayers.conf file and edit if necessary.

   $ pwd (you should be at $YOCTO/axxia-build)
   $ vi conf/bblayers.conf

BBLAYERS variable should have the following content (references to $YOCTO
below shoud be replaced with the actual value you provided in step 1).

   BBLAYERS ?= " \
            $YOCTO/poky/meta \
            $YOCTO/poky/meta-poky \
            $YOCTO/meta-openembedded/meta-oe \
            $YOCTO/meta-openembedded/meta-networking \
            $YOCTO/meta-openembedded/meta-filesystems \
            $YOCTO/meta-openembedded/meta-python \
            $YOCTO/meta-openembedded/meta-perl \
            $YOCTO/meta-security \
            $YOCTO/meta-security/meta-tpm \
            $YOCTO/meta-virtualization \
            $YOCTO/meta-intel \
            $YOCTO/meta-intel-axxia \
            $YOCTO/meta-intel-axxia/meta-intel-snr \
            "

10. Check the conf/local.conf file and edit if necessary.

   $ vi conf/local.conf

10.1 Set distribution configuration to have all Axxia specific features.

    DISTRO = "intel-axxia"

10.2 Set the console to use in the .iso image.

    GRUB_SERIAL = "console=ttyS4,115200"

10.3 Set Release version. Replace it with the tag for meta-intel-axxia
    from step 3.

    RELEASE_VERSION = "(meta-intel-axxia-tag)"

10.4 Depending on your processor, set these two options that control
    how much parallelism BitBake should use:

    BB_NUMBER_THREADS = "12"
    PARALLEL_MAKE = "-j 12"

10.5 Select a specific machine to target the build with:

    - Axxia SNR Mobile & Enterprise Communication Processors family.
    MACHINE = "axxiax86-64"

10.6 Select the kernel to use.
    Meta-intel-axxia is able to build the kernel from 2 sources:

a. Yocto Project Source repositories (git.yoctoproject.org)

   for standard
   PREFERRED_PROVIDER_virtual/kernel = "linux-yocto"

   for preempt-rt
   PREFERRED_PROVIDER_virtual/kernel = "linux-yocto-rt"

   will build kernel from Yocto repos:
   4.12: http://git.yoctoproject.org/git/linux-yocto-4.12
        standard/base or standard/preempt-rt/base branch

b. Public Intel Github (github.com/intel)

   for standard
   PREFERRED_PROVIDER_virtual/kernel = "linux-intel"

   for preempt-rt
   PREFERRED_PROVIDER_virtual/kernel = "linux-intel-rt"

   will build kernel from Intel Github public repos:
   4.14: git://github.com/intel/linux-intel-lts.git
         4.14/yocto/base or 4.14/yocto/base-rt branch

d. Local Kernel repositories (development purpose)

   PREFERRED_PROVIDER_virtual/kernel = "linux-local"

   To use a local kernel repository, you also need to add in local.conf
   or to ajust directly in recipes-kernel/linux/linux-local.bb recipe:

   LOCAL_KERNEL_PATH = "(path-to-local-kernel-repository)"
   LOCAL_KERNEL_BRANCH = "(kernel-branch)"

   NOTE: All changes should be committed in the local kernel.
   NOTE: Full defconfig should be copied in recipes-kernel/linux,
         besides linux-local.bb recipe.

10.7 Select the kernel version:

   for 4.12, only for linux-yocto PREFERRED_PROVIDER_virtual/kernel
   PREFERRED_VERSION_linux-yocto= "4.12%"

   for 4.14, only for linux-intel PREFERRED_PROVIDER_virtual/kernel
   PREFERRED_VERSION_linux-intel= "4.14%"

NOTE: (preferred-provider) can be linux-yocto, linux-yocto-rt,
      linux-intel, or linux-intel-rt. See  9.5.

10.8 Choose the System where the image will run between simulation and 
    emulation:

    for Victoria Canyon or ASE (default):
    RUNTARGET = "snr"

    for Frio FPGA Emulation System:
    RUNTARGET = "frio"

10.9 Add simicsfs-client support (for large and sim images). Sources tgz archive
    should copied in meta-intel-axxia/downloads directory: simics-5.0.156.tgz

    DISTRO_FEATURES_append = " simicsfs"

    To generate simics-5.0.156.tgz, get "ase_jvl_external*.txz" from
    the SW download page (VIP), and do the following.

    * tar xf ase_jvl_external*.txz
    * 'cd ase/simics'
    * tar czf simics-5.0.156.tgz simics-5.0.156

10.10 Set the serial console depending on the bios you are using.
    Default is ttyS4, but some old bios use ttyS5 or ttyS6.

    SNR_SERIAL_CONSOLE = "ttyS5"

10.11 Other optional settings for saving disk space and build time:
   
   DL_DIR = "/(some-shared-location)/downloads"
   SSTATE_DIR = "/(some-shared-location)/sstate-cache

10.12 Examples.

     See http://www.yoctoproject.org/docs/2.3/mega-manual/mega-manual.html
     for complete documentation on the Yocto build system.

     Here are the local.conf files used for open builds:

MACHINE = "axxiax86-64"
PREFERRED_PROVIDER_virtual/kernel = "linux-yocto"
PREFERRED_VERSION_linux-yocto = "4.12%"
GRUB_SERIAL = "console=ttyS4,115200"
DISTRO = "intel-axxia"
RUNTARGET = "snr"
DISTRO_FEATURES_append = " simicsfs"
PACKAGE_CLASSES ?= "package_rpm"
EXTRA_IMAGE_FEATURES ?= "debug-tweaks"
USER_CLASSES ?= "buildstats image-mklibs image-prelink"
PATCHRESOLVE = "noop"
BB_DISKMON_DIRS = "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    STOPTASKS,/tmp,100M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
    ABORT,/tmp,10M,1K"
PACKAGECONFIG_append_pn-qemu-native = " sdl"
PACKAGECONFIG_append_pn-nativesdk-qemu = " sdl"
CONF_VERSION = "1"

11. Select the image type and start the build
   $ cd $YOCTO/axxia-build
   $ bitbake (image type)

Available root filesystem types:
   * axxia-image-small 
     A small image used in simulation, flash, or as a ram disk. Should
     be sufficient to use the RTE. 

   * axxia-image-sim
     An image used in simulation.

   * axxia-image-vcn
     A more complete image.  Contains the SDK and LTP.

Once complete the images for the target machine will be available in 
the output directory 'tmp/deploy/images/$MACHINE'.

12. Images generated:

* (image type)-(machine name).ext2 (rootfs in EXT2 format)
* (image type)-(machine name).ext4 (rootfs in EXT4 format)
* (image type)-(machine name).hddimg (rootfs in hddimg format)
* (image type)-(machine name).iso (rootfs in ISO format)
* (image type)-(machine name).tar.gz (rootfs in tar+GZIP format)
* (image type)-(machine name).wic (rootfs in wic format)
* modules-(machine name).tgz (modules in tar+GZIP format)
* bzImage and bzImage-(machine name) (Linux Kernel binary)

13. Build and install the SDK:

In step 10. above, add '-c populate_sdk' to create the SDK install
self extracting script in tmp/deploy/sdk.  Simply run the poky*.sh
script.  To set up the environment to use the tools, source
environment-setup* in the install directory.

Note that to include the Linux source (to build external modules), use
'bitbake axxia-image-vcn -c populate_sdk'.  For other targets,
the Linux source will not be available.

After the installation completes, do the following.

13.1 Optional Linux Module Tools Update

If external Linux modules need to be buildable on multiple versions of
Linux hosts, and the tools were installed on the most recent version,
external Linux modules may not build.  This is because the version of
glibc on the Linux host that the SDK install script was executed on
are expected.  To use an older version, simply do the following on the
older Linux host.

source (install directory)/environment-setup*
cd $SDKTARGETSYSROOT/usr/src/kernel
make clean oldconfig scripts tools/objtool

13.2 Creating .craff Images for Simics

When in the simics environment, the 'craff' utility should be
available.  Use 'craff' to create .craff images from the .hddimg
images as follows.

craff -o (craff image) (Yocto .hddimg)

13.3 Creating Bootable Disks for Victoria Canyon

Here are three ways to boot Victoria Canyon.

13.3.1 SATA or USB based on the .rootfs.wic image.

* Write the .rootfs.wic image to a disk or USB device.
* Clean up the partition table.  Linux utilities such as gdisk and
  parted can do this.
* Attach the device to Victoria Canyon.
* The grub menu should default to "boot", and you should end up at the
  Linux prompt.  By default, the login is root and there is no
  password.

13.3.2 SATA or USB based on the .iso image.

* Write the .iso image to a disk or USB.
* Attach the device to Victoria Canyon.
* The grub menu should have the following entries.
  * "boot" - This will boot to the Linux prompt with a read-only /.
  * "install" - This will install to another attached device.
  * "Reboot into Firmware interface" - Go back to the EFI menu.

13.3.3 PXE BOOT

TBD


Guidelines for submitting patches
=================================

Please submit any patches against meta-intel-axxia BSPs to the 
meta-intel-axxia mailing list (meta-lsi@yoctoproject.org) and 
cc: the maintainers.

Mailing list:
    https://lists.yoctoproject.org/listinfo/meta-lsi

When creating patches, please use something like:
    git format-patch -s --subject-prefix='meta-intel-axxia][PATCH' origin

When sending patches, please use something like:
    git send-email --to meta-lsi@yoctoproject.org --cc (maintainers)
		      (generated patch)


Maintenance
===========

Maintainers: Daniel Dragomir (daniel.dragomir@windriver.com)
	     John Jacques (john.jacques@intel.com)

Please see the meta-intel-axxia/MAINTAINERS file for more details.


License
=======

All metadata is MIT licensed unless otherwise stated.  Souce code
included in tree for individual recipes is under the LICENSE stated in
each recipe (.bb file) unless otherwise stated.
