meta-intel-axxia
================

This is the official OpenEmbedded/Yocto BSP layer for Intelâ€™s family of
Axxia x86-64 Mobile & Enterprise Communication Processors.


Supported MACHINES
==================

Boards Supported by this layer (Please refer to the associate .conf
for more information):

	* axxiax86-64 - Axxia x86 Mobile & Enterprise Communication 
                        Processors family (64-bit)

Reference Boards
================

Snowridge - based on x86_64 architecture


Sources
=======

In most cases, the public repositories can be used (poky,
meta-openembedded, etc.). In the meta-intel-axxia case, however, there
are options. Here's what is available and what each provides.

The Intel github.com repositories have the latest. To access the
private repository, request permission from Intel. Note that the
private repository is used for development and is not supported.

   $ git clone https://github.com/axxia/meta-intel-axxia_private.git \
               meta-intel-axxia

The public Intel repository contains changes that have been submitted
to Yocto, but may not have been accepted yet.

   $ git clone https://github.com/axxia/meta-intel-axxia.git


Dependencies
============

See DEPENDENCIES.


Back Ported Linux Changes
========================

Some changes have been up-streamed, but have not yet been back ported
to Linux 4.19 (git://github.com/intel/linux-intel-lts.git). Some of
these have been added to this meta layer. The changes are described
below. In each case, any changes required are described and the
publically available patch is referenced. Only changes functionally
required for internal testing have been back ported.

The "title" of the commit (Subject: or first line) is used to identify
the commit, as this is the easiest way to find it in the repositories.

In the following descriptions, "with no changes" means that a patch
was obtained using 'git format-patch -1 <sha>' from the referenced
respoistory and was applied using 'git am -3 <patch>'.

In the meta layer, the patches for Linux 4.19 can be found in
meta-intel-snr/recipes-kernel/linux/patches/4.19.

i2c: ismt: Add support for Intel Cedar Fork
-------------------------------------------

5cda2d8 from kernel.org

Back ported to Yocto Linux 4.19, with no changes, as
SNR-0001-i2c-ismt-Add-support-for-Intel-Cedar-Fork.patch.

PCI/AER: Remove pci_cleanup_aer_uncorrect_error_status() calls
--------------------------------------------------------------

62b36c3 from kernel.org

Back ported to Yocto Linux 4.19, with no changes, as
SNR-0002-PCI-AER-Remove-pci_cleanup_aer_uncorrect_error_statu.patch.

dmaengine: ioat: fix prototype of ioat_enumerate_channels
---------------------------------------------------------

f4d34aa from kernel.org

Back ported to Yocto Linux 4.19, with no changes, as
SNR-0003-dmaengine-ioat-fix-prototype-of-ioat_enumerate_chann.patch.

dmaengine: ioatdma: Add Snow Ridge ioatdma device id
----------------------------------------------------

4d75873 from kernel.org

Back ported to Yocto Linux 4.19, with no changes, as
SNR-0004-dmaengine-ioatdma-Add-Snow-Ridge-ioatdma-device-id.patch.

dmaengine: ioatdma: disable DCA enabling on IOATDMA v3.4
--------------------------------------------------------

11e31e2 from kernel.org

Back ported to Yocto Linux 4.19, with no changes, as
SNR-0005-dmaengine-ioatdma-disable-DCA-enabling-on-IOATDMA-v3.patch.

dmaengine: ioatdma: add descriptor pre-fetch support for v3.4
-------------------------------------------------------------

e0100d4 from kernel.org

Back ported to Yocto Linux 4.19, with no changes, as
SNR-0006-dmaengine-ioatdma-add-descriptor-pre-fetch-support-f.patch

dmaengine: ioatdma: support latency tolerance report (LTR) for v3.4
-------------------------------------------------------------------

528314b from kernel.org

Back ported to Yocto Linux 4.19, with no changes, as
SNR-0007-dmaengine-ioatdma-support-latency-tolerance-report-L.patch

drivers/watchdog: Ignore 'No Reboot' Bit
----------------------------------------

This has not been upstreamed, and there is no plan to upstream it.

Early versions of the SNR chip do not allow the "no reboot" bit to be
accessed.  This commit simply assumes that it is writeable without
checking in order to allow the watchdog to but used in Linux.  This
will be fixed in later versions of the chip.

Note that, by default, this patch will do nothing.  To enable it, add
'iTCO_wdt.assume_noreboot_access=1' to the Linux command line.

Included as SNR-0008-drivers-watchdog-Ignore-No-Reboot-Bit.patch.

clocksource: Add option to force acpi_pm as clocksource watchdog
----------------------------------------------------------------

Add a kernel command line option to force the use of acpi_pm as the
watchdog clocksource. To use it, add the following to the kernel
command line:

    ricardo_clocksource_wd=force_acpi_pm_wd

and in dmesg look for:

    RICARDO: Force acpi_pm as watchdog

Included as
SNR-0009-clocksource-Add-option-to-force-acpi_pm-as-clocksour.patch.

x86/umwait: Initialize umwait control values
--------------------------------------------

"Add support for Tremont AiA instructions", part 1 of 10.

bd688c6 from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0010-x86-umwait-Initialize-umwait-control-values.patch

x86/umwait: Add sysfs interface to control umwait C0.2 state
------------------------------------------------------------

"Add support for Tremont AiA instructions", part 2 of 10.

ff4b353 from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0011-x86-umwait-Add-sysfs-interface-to-control-umwait-C0..patch

x86/umwait: Fix error handling in umwait_init()
-----------------------------------------------

"Add support for Tremont AiA instructions", part 3 of 10.

e740925 from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0012-x86-umwait-Fix-error-handling-in-umwait_init.patch

x86/umwait: Add sysfs interface to control umwait maximum time
--------------------------------------------------------------

"Add support for Tremont AiA instructions", part 4 of 10.

bd9a0c9 from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0013-x86-umwait-Add-sysfs-interface-to-control-umwait-max.patch

x86/cpufeatures: Enumerate user wait instructions
-------------------------------------------------

"Add support for Tremont AiA instructions", part 5 of 10.

6dbbf5e from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0014-x86-cpufeatures-Enumerate-user-wait-instructions.patch

x86/cpufeatures: Enumerate MOVDIRI instruction
----------------------------------------------

"Add support for Tremont AiA instructions", part 6 of 10.

33823f4d from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0015-x86-cpufeatures-Enumerate-MOVDIRI-instruction.patch

x86/cpufeatures: Enumerate MOVDIR64B instruction
------------------------------------------------

"Add support for Tremont AiA instructions", part 7 of 10.

ace6485 from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0016-x86-cpufeatures-Enumerate-MOVDIR64B-instruction.patch

PM / arch: x86: Rework the MSR_IA32_ENERGY_PERF_BIAS handling
-------------------------------------------------------------

"Add support for Tremont AiA instructions", part 8 of 10.

5861381 from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0017-PM-arch-x86-Rework-the-MSR_IA32_ENERGY_PERF_BIAS-han.patch

PM / arch: x86: MSR_IA32_ENERGY_PERF_BIAS sysfs interface
---------------------------------------------------------

"Add support for Tremont AiA instructions", part 9 of 10.

b9c273b from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0018-PM-arch-x86-MSR_IA32_ENERGY_PERF_BIAS-sysfs-interfac.patch

Documentation/ABI: Document umwait control sysfs interfaces
-----------------------------------------------------------

"Add support for Tremont AiA instructions", part 10 of 10.

203dffa from kernel.org

Back ported to Linux 4.19, with no changes, as
SNR-0019-Documentation-ABI-Document-umwait-control-sysfs-inte.patch

vfio/pci: Mask buggy SR-IOV VF INTx support
-------------------------------------------

db04264 from kernel.org

Back ported ot Linux 4.19, with no changes, as
SNR-0020-vfio-pci-Mask-buggy-SR-IOV-VF-INTx-support.patch

EDAC, i10nm: Add a driver for Intel 10nm server processors
----------------------------------------------------------

d4dc89d from kernel.org

Back ported ot Linux 4.19, with no changes, as
SNR-0021-EDAC-i10nm-Add-a-driver-for-Intel-10nm-server-proces.patch


Building the meta-intel-axxia BSP layer
=======================================

To begin using the Yocto Project build tools, you must first setup your work
environment and verify that you have the required host packages installed
on the system you will be using for builds. 

Check the YOCTO Reference Manual for the system you are using and verify you
have the minimum required packages installed:
http://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html

1. Create an empty build directory and verify that the partition has
   at least 50Gb of free space. Next set an environment variable, YOCTO,
   to the full path.

   $ cd $HOME
   $ df -h .  # verify output shows adequate space available
   $ mkdir yocto
   $ cd yocto
   $ export YOCTO=$HOME/yocto # should also add this to your ~/.bashrc file.

2. Clone the Axxia meta layer. This provides meta data for building
   images for the Axxia specific board types.  See 'Sources' above to
   select the right meta-intel-axxia repository, branch, and version.
   Use the 'thud' branch or the tag specified in the release notes.

   $ cd $YOCTO
   $ (the git clone command chosen above)
   $ cd meta-intel-axxia

   If using the 'thud' branch.

   $ git checkout thud

   If using the tag specified in the releases notes.

   $ git checkout tags/(the tag specified in the releases notes)

3. Clone the Yocto Project build tools (Poky) environment.

   $ cd $YOCTO
   $ git clone git://git.yoctoproject.org/poky.git
   $ cd poky
   $ git checkout <the revision specified in DEPENDENCIES>

4. The Open Embedded project provides many useful layers and packages
   such as networking. Download the Open Embedded Yocto Project hosted
   repository with the following.

   $ cd $YOCTO
   $ git clone https://github.com/openembedded/meta-openembedded.git
   $ cd meta-openembedded
   $ git checkout <the revision specified in DEPENDENCIES>

5. Clone Yocto Virtualization Layer which provides packages for
   virtualization such as Linux Container Support (lxc).

   $ cd $YOCTO
   $ git clone git://git.yoctoproject.org/meta-virtualization
   $ cd meta-virtualization
   $ git checkout <the revision specified in DEPENDENCIES>

6. Clone the Intel meta layer. This provides Intel hardware support 
   metadata which are inherited in axxiax86-64 BSP.

   $ cd $YOCTO
   $ git clone git://git.yoctoproject.org/meta-intel
   $ cd meta-intel
   $ git checkout <the revision specified in DEPENDENCIES>

7. Clone the Yocto security meta layer. This provides recipes for some
   utilities used in the axxia-image-vcn image.

   $ cd $YOCTO
   $ git clone git://git.yoctoproject.org/meta-security
   $ cd meta-security
   $ git checkout <the revision specified in DEPENDENCIES>

8. Clone the ROS layer.  This provides ROS (robot operating system)
   components.

   $ cd $YOCTO
   $ git clone git://github.com/bmwcarit/meta-ros.git
   $ cd meta-ros
   $ git checkout <the revision specified in DEPENDENCIES>

9. Create the build directory. The name is optional and will default
   to 'build', however it helps to choose a name to match the board
   type. For example, we will use axxia.

   $ cd $YOCTO
   $ source meta-intel-axxia/meta-intel-axxia/axxia-env
   $ source poky/oe-init-build-env axxia-build

10. Check the conf/bblayers.conf file and edit if necessary.

   $ pwd (you should be at $YOCTO/axxia-build)
   $ vi conf/bblayers.conf

BBLAYERS variable should have the following content (references to $YOCTO
below shoud be replaced with the actual value you provided in step 1).

   BBLAYERS ?= " \
            $YOCTO/poky/meta \
            $YOCTO/poky/meta-poky \
            $YOCTO/meta-openembedded/meta-oe \
            $YOCTO/meta-openembedded/meta-networking \
            $YOCTO/meta-openembedded/meta-filesystems \
            $YOCTO/meta-openembedded/meta-python \
            $YOCTO/meta-openembedded/meta-perl \
            $YOCTO/meta-security \
            $YOCTO/meta-ros \
            $YOCTO/meta-security/meta-tpm \
            $YOCTO/meta-virtualization \
            $YOCTO/meta-intel \
            $YOCTO/meta-intel-axxia/meta-intel-axxia \
            $YOCTO/meta-intel-axxia/meta-intel-snr \
            "

11. Check the conf/local.conf file and edit if necessary.

   $ vi conf/local.conf

11.1 Set distribution configuration to have all Axxia specific features.

    DISTRO = "intel-axxia"

11.2 Set the console to use in the .iso image.

    GRUB_SERIAL = "console=ttyS4,115200"

11.3 Set Release version. Replace it with the tag for meta-intel-axxia
    from step 3.

    RELEASE_VERSION = "(meta-intel-axxia-tag)"

11.4 Depending on your processor, set these two options that control
    how much parallelism BitBake should use:

    BB_NUMBER_THREADS = "12"
    PARALLEL_MAKE = "-j 12"

11.5 Select a specific machine to target the build with:

    - Axxia SNR Mobile & Enterprise Communication Processors family.
    MACHINE = "axxiax86-64"

11.6 Select the kernel to use.
    Meta-intel-axxia is able to build the kernel from 3 sources:

a. Public Intel Github (github.com/intel)

   for standard
   PREFERRED_PROVIDER_virtual/kernel = "linux-intel"

   will build kernel from Intel Github public repos:
   4.19: git://github.com/intel/linux-intel-lts.git
         4.19/base or 4.9/yocto/base-rt

b. Local Kernel repositories (development purpose)

   PREFERRED_PROVIDER_virtual/kernel = "linux-local"

   To use a local kernel repository, you also need to add in local.conf
   or to ajust directly in recipes-kernel/linux/linux-local.bb recipe:

   LOCAL_KERNEL_PATH = "(path-to-local-kernel-repository)"
   LOCAL_KERNEL_BRANCH = "(kernel-branch)"

   NOTE: All changes should be committed in the local kernel.
   NOTE: Full defconfig should be copied in recipes-kernel/linux,
         besides linux-local.bb recipe.

11.7 Select the kernel version:

   PREFERRED_VERSION_(preferred-provider)= "4.19%"

NOTE: No preferred version should be set for linux-local provider.

11.8 Choose the System where the image will run between hardware/simulation
     and emulation:

    for Victoria Canyon or ASE (default):
    RUNTARGET = "snr"

    for Frio FPGA Emulation System:
    RUNTARGET = "frio"

11.9 Add simicsfs-client support (for large and sim images). Sources tgz archive
    should copied in meta-intel-axxia/downloads directory: simics-5.0.192.tgz

    DISTRO_FEATURES_append = " simicsfs"

    To generate simics-5.0.192.tgz, get "ase_jvl_external*.txz" from
    the SW download page (VIP), and do the following.

    * tar xf ase_jvl_external*.txz
    * 'cd ase/simics'
    * tar czf simics-5.0.192.tgz simics-5.0.192

11.10 Add gcc9 support for a newer version of gcc and glibc instead
    the default one from upstream. This should not normally be used!

    DISTRO_FEATURES_append = " gcc9"

11.11 Set the serial console depending on the bios you are using.
    Default is ttyS4, but some old bios use ttyS5 or ttyS6.

    SNR_SERIAL_CONSOLE = "ttyS5"

11.12 Other optional settings for saving disk space and build time:
   
   DL_DIR = "/(some-shared-location)/downloads"
   SSTATE_DIR = "/(some-shared-location)/sstate-cache

11.13 Examples.

     See http://www.yoctoproject.org/docs/2.3/mega-manual/mega-manual.html
     for complete documentation on the Yocto build system.

     Here are the local.conf files used for open builds:

MACHINE = "axxiax86-64"
PREFERRED_PROVIDER_virtual/kernel = "linux-intel"
PREFERRED_VERSION_linux-intel = "4.19%"
GRUB_SERIAL = "console=ttyS4,115200"
DISTRO = "intel-axxia"
RUNTARGET = "snr"
DISTRO_FEATURES_append = " simicsfs"
PACKAGE_CLASSES ?= "package_rpm"
EXTRA_IMAGE_FEATURES ?= "debug-tweaks"
USER_CLASSES ?= "buildstats image-mklibs image-prelink"
PATCHRESOLVE = "noop"
BB_DISKMON_DIRS = "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    STOPTASKS,/tmp,100M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
    ABORT,/tmp,10M,1K"
PACKAGECONFIG_append_pn-qemu-native = " sdl"
PACKAGECONFIG_append_pn-nativesdk-qemu = " sdl"
CONF_VERSION = "1"

12. Select the image type and start the build
   $ cd $YOCTO/axxia-build
   $ bitbake (image type)

Available root filesystem types:
   * axxia-image-small 
     A small image used in simulation, flash, or as a ram disk. Should
     be sufficient to use the RTE. 

   * axxia-image-sim
     An image used in simulation.

   * axxia-image-vcn
     A more complete image. Contains the SDK and LTP.

Once complete the images for the target machine will be available in 
the output directory 'tmp/deploy/images/$MACHINE'.

13. Images generated:

* (image type)-(machine name).ext2 (rootfs in EXT2 format)
* (image type)-(machine name).ext4 (rootfs in EXT4 format)
* (image type)-(machine name).hddimg (rootfs in hddimg format)
* (image type)-(machine name).iso (rootfs in ISO format)
* (image type)-(machine name).tar.gz (rootfs in tar+GZIP format)
* (image type)-(machine name).wic (rootfs in wic format)
* modules-(machine name).tgz (modules in tar+GZIP format)
* bzImage and bzImage-(machine name) (Linux Kernel binary)

14. Build and install the SDK:

In step 10. above, add '-c populate_sdk' to create the SDK install
self extracting script in tmp/deploy/sdk.  Simply run the poky*.sh
script.  To set up the environment to use the tools, source
environment-setup* in the install directory.

Note that to include the Linux source (to build external modules), use
'bitbake axxia-image-vcn -c populate_sdk'.  For other targets,
the Linux source will not be available.

After the installation completes, do the following.

14.1 Optional Linux Module Tools Update

If external Linux modules need to be buildable on multiple versions of
Linux hosts, and the tools were installed on the most recent version,
external Linux modules may not build.  This is because the version of
glibc on the Linux host that the SDK install script was executed on
are expected.  To use an older version, simply do the following on the
older Linux host.

source (install directory)/environment-setup*
cd $SDKTARGETSYSROOT/usr/src/kernel
make clean oldconfig scripts tools/objtool

Note that the Linux host will need to be set up to build Linux for the
above to work.  On Ubuntu, for example, this would mean 'apt-get
install libncurses5-dev flex bison libssl-dev dkms libelf-dev'.

14.2 Creating .craff Images for Simics

When in the simics environment, the 'craff' utility should be
available.  Use 'craff' to create .craff images from the .hddimg
images as follows.

craff -o (craff image) (Yocto .hddimg)

14.3 Creating Bootable Disks for Victoria Canyon

Here are three ways to boot Victoria Canyon.

14.3.1 SATA or USB based on the .rootfs.wic image.

* Write the .rootfs.wic image to a disk or USB device.
* Clean up the partition table.  Linux utilities such as gdisk and
  parted can do this.
* Attach the device to Victoria Canyon.
* The grub menu should default to "boot", and you should end up at the
  Linux prompt.  By default, the login is root and there is no
  password.

14.3.2 SATA or USB based on the .iso image.

* Write the .iso image to a disk or USB.
* Attach the device to Victoria Canyon.
* The grub menu should have the following entries.
  * "boot" - This will boot to the Linux prompt with a read-only /.
  * "install" - This will install to another attached device.
  * "Reboot into Firmware interface" - Go back to the EFI menu.

14.3.3 PXE BOOT

TBD


Guidelines for submitting patches
=================================

Please submit any patches against meta-intel-axxia BSPs to the 
meta-intel-axxia mailing list (meta-lsi@yoctoproject.org) and 
cc: the maintainers.

Mailing list:
    https://lists.yoctoproject.org/listinfo/meta-lsi

When creating patches, please use something like:
    git format-patch -s --subject-prefix='meta-intel-axxia][PATCH' origin

When sending patches, please use something like:
    git send-email --to meta-lsi@yoctoproject.org --cc (maintainers)
		      (generated patch)


Maintenance
===========

Maintainers: Daniel Dragomir (daniel.dragomir@windriver.com)
	     John Jacques (john.jacques@intel.com)

Please see the meta-intel-axxia/MAINTAINERS file for more details.


License
=======

All metadata is MIT licensed unless otherwise stated.  Souce code
included in tree for individual recipes is under the LICENSE stated in
each recipe (.bb file) unless otherwise stated.
